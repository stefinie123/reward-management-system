/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from "react";
import { Button } from "@mui/material";
import { styled } from "@mui/material/styles";
import { CardRewardProps } from "src/types";
import useCardReward from "src/components/CardReward/useCardReward";

const CardReward1: any = styled("div")(({ theme }: any) => ({
  backgroundColor: theme.palette["Background"]["Background"],
  border: `1px solid rgba(176, 176, 176, 1)`,
  boxSizing: `border-box`,
  borderRadius: `12px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  width: "100%",
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px 0px 4px 0px`,
  overflow: `hidden`,
  height: "auto",
}));

const Img: any = styled("div", {
  shouldForwardProp: (prop: any) => !["props"].includes(prop.toString()),
})(({ props }: any) => ({
  backgroundPosition: `center`,
  backgroundSize: `cover`,
  backgroundRepeat: `no-repeat`,
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `flex-start`,
  alignSelf: `stretch`,
  height: `148px`,
  margin: `0px`,
  overflow: `hidden`,
  backgroundImage: props.reward.imageSrc,
}));

const Content: any = styled("div")({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `14px 0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Details: any = styled("div")({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Top: any = styled("div")({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Text: any = styled("div")({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const TitleTop: any = styled("div")({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Title: any = styled("div")(({ theme }: any) => ({
  textAlign: `center`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette["Text"]["Primary"],
  fontStyle: theme.typography["Typography"]["H6"].fontStyle,
  fontFamily: theme.typography["Typography"]["H6"].fontFamily,
  fontWeight: theme.typography["Typography"]["H6"].fontWeight,
  fontSize: theme.typography["Typography"]["H6"].fontSize,
  letterSpacing: theme.typography["Typography"]["H6"].letterSpacing,
  lineHeight: theme.typography["Typography"]["H6"].lineHeight,
  textDecoration: theme.typography["Typography"]["H6"].textDecoration,
  textTransform: theme.typography["Typography"]["H6"].textTransform,
  flex: `1`,
  margin: `0px`,
}));

const Frame5: any = styled("div")({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `6px 0px 0px 0px`,
});

const Details1: any = styled("div")(({ theme }: any) => ({
  textAlign: `center`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette["Text"]["Primary"],
  fontStyle: theme.typography["Typography"]["Body 2"].fontStyle,
  fontFamily: theme.typography["Typography"]["Body 2"].fontFamily,
  fontWeight: theme.typography["Typography"]["Body 2"].fontWeight,
  fontSize: theme.typography["Typography"]["Body 2"].fontSize,
  letterSpacing: theme.typography["Typography"]["Body 2"].letterSpacing,
  lineHeight: theme.typography["Typography"]["Body 2"].lineHeight,
  textDecoration: theme.typography["Typography"]["Body 2"].textDecoration,
  textTransform: theme.typography["Typography"]["Body 2"].textTransform,
  alignSelf: `stretch`,
  margin: `0px`,
}));

const Frame4: any = styled("div")({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `14px 0px 0px 0px`,
});

const ButtonText: any = styled(Button)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette["Primary"]["Main"],
  fontStyle: theme.typography["Components"]["Button Font - Large"].fontStyle,
  fontFamily: theme.typography["Components"]["Button Font - Large"].fontFamily,
  fontWeight: theme.typography["Components"]["Button Font - Large"].fontWeight,
  fontSize: theme.typography["Components"]["Button Font - Large"].fontSize,
  letterSpacing:
    theme.typography["Components"]["Button Font - Large"].letterSpacing,
  lineHeight: theme.typography["Components"]["Button Font - Large"].lineHeight,
  textDecoration:
    theme.typography["Components"]["Button Font - Large"].textDecoration,
  textTransform:
    theme.typography["Components"]["Button Font - Large"].textTransform,
}));

function CardReward(props: CardRewardProps): JSX.Element {
  const { data, fns } = useCardReward(props);

  return (
    <CardReward1 className={props.className}>
      <Img props={props}>
        <img src={data.imageUrl} alt={`${props.reward.name} logo`} />
      </Img>
      <Content>
        <Details>
          <Top>
            <Text>
              <TitleTop>
                <Title>{props.reward.name}</Title>
              </TitleTop>
              <Frame5>
                <Details1>{`${props.reward.totalPoints}pts / $${props.reward.value}`}</Details1>
              </Frame5>
            </Text>
          </Top>
          <Frame4>
            <ButtonText
              variant="text"
              size={"large"}
              color={"primary"}
              disabled={false}
              onClick={() => fns.rewardDetailsPage(props.reward.id)}
            >
              {"REDEEM"}
            </ButtonText>
          </Frame4>
        </Details>
      </Content>
    </CardReward1>
  );
}

export default CardReward;
