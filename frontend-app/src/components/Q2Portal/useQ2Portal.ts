/**********************************************************************
 *
 *   Component hook generated by Quest
 *
 *   Code Logic for the component goes in this hook
 *   To setup bindings that use the data here or call the functions here, use the Quest editor
 *   Do not change the name of the hook
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React, { useEffect, useState } from "react";
import useQ2PortalResponsiveSize from "./useQ2PortalResponsiveSize";
import { useAuthContext } from "@asgardeo/auth-react";
import { CardDetails } from "src/api/types";
import { getCardDetails } from "src/api/api";
import { useNavigate } from "react-router-dom";

/* These are the possible values for the current variant. Use this to change the currentVariant dynamically.
Please don't modify */
const variantOptions = {
  ScreenDesktop: "ScreenDesktop",
  ScreenMobile: "ScreenMobile",
};

const useQ2Portal = () => {
  const navigate = useNavigate();
  const [currentVariant, setCurrentVariant] = React.useState<string>(
    variantOptions["ScreenDesktop"]
  );
  const { signIn, isAuthenticated, state } = useAuthContext();
  const [isAuthLoading, setIsAuthLoading] = useState(false);
  const [isCardDetailsLoading, setIsCardDetailsLoading] = useState(false);
  const [signedIn, setSignedIn] = useState(false);
  const [cardDetails, setCardDetails] = useState<CardDetails | null>(null);

  const sleep = (ms: number) => new Promise((r) => setTimeout(r, ms));

  const checkAuthState = async (): Promise<boolean> => {
    setIsAuthLoading(true);
    await sleep(2000);
    const isSignedIn = await isAuthenticated();
    setSignedIn(isSignedIn);
    setIsAuthLoading(false);
    return isSignedIn;
  };

  useEffect(() => {
    if(!state.isAuthenticated){
      checkAuthState().then((isSignedIn) => {
        if (!isSignedIn) {
          signIn()
            .then(() => {
              setSignedIn(true);
            })
            .catch((e) => {
              console.log(e);
            });
        }
      });
    }
  }, [state]);

  useEffect(() => {
    if (signedIn && state.sub) {
      getCardInfo(state.sub);
    }
  }, [signedIn, state.sub]);

  async function getCardInfo(userId) {
    setIsCardDetailsLoading(true);
    getCardDetails(userId)
      .then((res) => {
        setCardDetails(res.data);
      })
      .catch((e) => {
        console.log(e);
      })
      .finally(() => {
        setIsCardDetailsLoading(false);
      });
  }

  const onRedeemPoints = () => {
    navigate("/rewards");
  };

  const breakpointsVariant = useQ2PortalResponsiveSize();

  React.useEffect(() => {
    if (breakpointsVariant !== currentVariant) {
      setCurrentVariant(breakpointsVariant);
    }
  }, [breakpointsVariant]);

  const data: any = {
    currentVariant,
    signedIn,
    isAuthLoading,
    isCardDetailsLoading,
    cardDetails,
  };

  const fns: any = { setCurrentVariant, onRedeemPoints };

  return { data, fns };
};

export default useQ2Portal;
